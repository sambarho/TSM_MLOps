name: pytest

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            lfs: true

        - name: Pull LFS objects
          run: git lfs pull
    
        - name: Set up Python 3.11
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
            cache: 'pip'  # Enable built-in pip caching
            cache-dependency-path: |
              requirements.txt
              setup.py

        # Additional layer of caching for pip
        - name: Cache pip packages
          uses: actions/cache@v3
          with:
            path: |
              ~/.cache/pip
              ~/.local/lib/python3.11/site-packages
            key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('setup.py') }}
            restore-keys: |
              ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-
              ${{ runner.os }}-pip-
    
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            # Show Python and pip versions for debugging
            python --version
            pip --version
            # Install with verbose output
            pip install -v -r requirements.txt
            pip install -v pytest-cov flake8
            # List installed packages for debugging
            pip list
    
        - name: Lint with flake8
          run: |
            # Initially only check for critical errors
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=resume_matcher/models/*
            # exit-zero treats all errors as warnings
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=resume_matcher/models/*
    
        - name: Run tests with coverage
          run: |
            # Show current directory structure
            ls -la
            # Run pytest with more verbose output
            python -m pytest --maxfail=1 --disable-warnings -v --cov=tsm_mlops --cov-report=xml --capture=no

        - name: Check coverage report exists
          run: |
            ls -la coverage.xml || echo "coverage.xml not found"
          if: always()

        - name: Upload coverage report
          if: always()  # Try to upload even if tests fail
          uses: actions/upload-artifact@v4  # Updated to v4
          with:
            name: coverage-report
            path: coverage.xml
            if-no-files-found: warn  # Don't fail if no coverage report
