name: pytest

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            lfs: true

        - name: Pull LFS objects
          run: git lfs pull
    
        - name: Set up Python 3.11
          uses: actions/setup-python@v5
          with:
            python-version: '3.11'
            cache: 'pip'
            cache-dependency-path: |
              requirements.txt
              setup.py

        - name: Cache pip packages
          uses: actions/cache@v3
          with:
            path: |
              ~/.cache/pip
              ~/.local/lib/python3.11/site-packages
            key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ hashFiles('setup.py') }}
            restore-keys: |
              ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-
              ${{ runner.os }}-pip-
    
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            python --version
            pip --version
            pip install -v -r requirements.txt
            pip install -v pytest-cov flake8
            pip list
    
        - name: Lint with flake8
          run: |
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=resume_matcher/models/*
            flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=resume_matcher/models/*
    
        - name: Show test directory structure
          run: |
            echo "Current directory:"
            pwd
            echo "\nDirectory contents:"
            ls -R
            echo "\nPython path:"
            python -c "import sys; print('\n'.join(sys.path))"

        - name: Run tests with coverage
          run: |
            # First try to run pytest to see if it can find any tests
            python -m pytest --collect-only -v
            
            # Then run the actual tests with coverage
            python -m pytest --maxfail=1 --disable-warnings -v --cov=tsm_mlops --cov-report=xml --capture=no || {
              echo "Tests failed. Showing error details:"
              cat coverage.xml || echo "No coverage report was generated"
              exit 1
            }

        - name: Check coverage report exists
          if: always()
          run: |
            echo "Checking for coverage report..."
            ls -la || true
            if [ -f coverage.xml ]; then
              echo "Coverage report exists:"
              cat coverage.xml
            else
              echo "No coverage report found"
            fi

        - name: Upload coverage report
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: coverage-report
            path: |
              coverage.xml
              .coverage
            if-no-files-found: warn
